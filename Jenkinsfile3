pipeline {
    agent {
        docker {
            image 'amazon/aws-cli:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        ECR_REPO = '318518286440.dkr.ecr.us-east-1.amazonaws.com'
        SOURCE_REPO = 'srvregistry01.caredmegatone.com'
        IMAGE_NAME = 'tecnologia/jenkinsk8s'
        IMAGE_TAG = 'v1.0'
    }
    stages {
        stage('Prepare Docker') {
            steps {
                sh """
                apt-get update && \
                apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
                curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \
                echo "deb [arch=amd64] https://download.docker.com/linux/debian \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
                apt-get update && \
                apt-get install -y docker-ce docker-ce-cli containerd.io
                """
            }
        }
        stage('Login ECR') {
            steps {
                withCredentials([aws(credentialsId: 'awscarsa')]) {
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPO'
                }
            }
        }
        stage('Pull Image') {
            steps {
                sh "docker pull $SOURCE_REPO/$IMAGE_NAME:$IMAGE_TAG"
            }
        }
        stage('Tag Image') {
            steps {
                sh "docker tag $SOURCE_REPO/$IMAGE_NAME:$IMAGE_TAG $ECR_REPO/$IMAGE_NAME:$IMAGE_TAG"
            }
        }
        stage('Push Image to ECR') {
            steps {
                sh "docker push $ECR_REPO/$IMAGE_NAME:$IMAGE_TAG"
            }
        }
    }
}
